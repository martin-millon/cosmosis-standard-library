name: project_2d
version: 1.0
purpose: Project 3D power spectra to 2D tomographic bins using the Limber approximation
url: ''
interface: project_2d.py
attribution: [CosmoSIS Team]
rules: []
cite: []
assumptions:
-   The Limber approximation is reasonable for the fields being integrated
-   Flat sky approximation
-   GR is assumed in various ways

explanation: |
    The Limber approximation integrates a 3D power spectrum over the radial
    direction to get a 2D angular power spectrum.  It is an approximation
    which is only valid on smaller scales.
    
    :math:`C_\ell =  A \int_0^{\chi_1} W_1(\chi) W_2(\chi) P(k=(l+0.5)/\chi, z(\chi)) / \chi^2 d\chi`
    
    The full integral must integrate over k(\ell) also.
    This module is a python interface to a Limber integrator written in C, and can 
    generate a range of different spectra depending on what options you set.
    
    It can generate spectra for any pair of
    (Shear, Position, Intrinsic, Magnification, Cmbkappa)
    though beware that for certain combinations and scales the Limber approximation will 
    be inaccurate.
    
    Depending which spectra you ask for, it will look for different input P(k) value:
    
    +-----------------------------+----------------------------+----------------------------+
    | Option name                 | Input-3d-spectrum          | Default output name        |
    +=============================+============================+============================+
    | shear-shear                 | matter_power_nl            | shear_cl                   |
    +-----------------------------+----------------------------+----------------------------+
    | weyl-weyl                   | weyl_curvature_spectrum_nl | shear_cl                   |
    +-----------------------------+----------------------------+----------------------------+
    | shear-intrinsic             | matter_intrinsic_power     | shear_cl_gi                |
    +-----------------------------+----------------------------+----------------------------+
    | intrinsic-intrinsic         | intrinsic_power            | shear_cl_ii                |
    +-----------------------------+----------------------------+----------------------------+
    | intrinsicb-intrinsicb       | intrinsic_power_bb         | shear_cl_bb                |
    +-----------------------------+----------------------------+----------------------------+
    | position-position           | matter_power_nl            | galaxy_cl                  |
    +-----------------------------+----------------------------+----------------------------+
    | magnification-density       | matter_power_nl            | magnification_density_cl   |
    +-----------------------------+----------------------------+----------------------------+
    | magnification-magnification | matter_power_nl            | magnification_cl           |
    +-----------------------------+----------------------------+----------------------------+
    | position-shear              | matter_power_nl            | galaxy_shear_cl            |
    +-----------------------------+----------------------------+----------------------------+
    | density-intrinsic           | matter_intrinsic_power     | galaxy_intrinsic_cl        |
    +-----------------------------+----------------------------+----------------------------+
    | magnification-intrinsic     | matter_intrinsic_power     | magnification_intrinsic_cl |
    +-----------------------------+----------------------------+----------------------------+
    | magnification-shear         | matter_power_nl            | magnification_shear_cl     |
    +-----------------------------+----------------------------+----------------------------+
    | shear-cmbkappa              | matter_power_nl            | shear_cmbkappa_cl          |
    +-----------------------------+----------------------------+----------------------------+
    | cmbkappa-cmbkappa           | matter_power_nl            | cmbkappa_cl                |
    +-----------------------------+----------------------------+----------------------------+
    | intrinsic-cmbkappa          | matter_intrinsic_power     | intrinsic_cmbkappa_cl      |
    +-----------------------------+----------------------------+----------------------------+
    | density-cmbkappa            | matter_power_nl            | galaxy_cmbkappa_cl         |
    +-----------------------------+----------------------------+----------------------------+
    | fast-shear-shear-ia         | matter_power_nl            | shear_cl                   |
    +-----------------------------+----------------------------+----------------------------+
    | fast-lingal-shear-ia        | matter_power_nl            | galaxy_shear_cl            |
    +-----------------------------+----------------------------+----------------------------+
    | fast-position-shear-ia      | matter_power_nl            | galaxy_shear_cl            |
    +-----------------------------+----------------------------+----------------------------+
    | lingal-lingal               | matter_power_nl            | galaxy_cl                  |
    +-----------------------------+----------------------------+----------------------------+
    | lingal-shear                | matter_power_nl            | galaxy_shear_cl            |
    +-----------------------------+----------------------------+----------------------------+
    | lingal-magnification        | matter_power_nl            | galaxy_magnification_cl    |
    +-----------------------------+----------------------------+----------------------------+
    | lingal-intrinsic            | matter_intrinsic_power     | galaxy_intrinsic_cl        |
    +-----------------------------+----------------------------+----------------------------+
    | nlgal-nlgal                 | matter_power_nl            | galaxy_cl                  |
    +-----------------------------+----------------------------+----------------------------+
    | nlgal-shear                 | matter_power_nl            | galaxy_shear_cl            |
    +-----------------------------+----------------------------+----------------------------+
    | nlgal-magnification         | matter_power_nl            | galaxy_magnification_cl    |
    +-----------------------------+----------------------------+----------------------------+


    For each of the spectra listed above you can set a parameter in the parameter file 
    to describe whether that term should be calculated and what input n(z) and output
    names should be used for it.

    You can set either:

    shear-shear = T   ; to use the default wl_number_density n(z) section and save to default shear_cl

    shear-shear = euclid-ska  ; to cross-correlate n(z) from nz_euclid and nz_ska sections, and save to shear_cl

    shear-shear = red-red:shear_cl_red  ; to auto-correlate n(z) from the nz_red section and then save to shear_cl_red

    If no spectra are chosen at all then only "shear-shear=T" is assumed.

    The same forms can be used for all the other spectra, though note that the magnification spectra
    also require information on the luminosity function.

    Lingal refers to clustering spectra for a linearly-biased sample. Nlgal is for non-linearly biased samples.

    Parts of this code and the underlying implementation of limber are based on cosmocalc:
    https://bitbucket.org/beckermr/cosmocalc-public

params:
    verbose:
        meaning: Print more output.
        type: bool
        default: false
    fatal_errors:
        meaning: Raise an error instead of returning non-zero on error loading splines. Handy for debugging.
        type: bool
        default: false
    save_kernels:
        meaning: Save the kernels n(chi) and w(chi) to the block
        type: bool
        default: false
    do_exact:
        meaning: Spectra for which to do exact (non-limber) calculation at low ell (space-separated)
        type: str
        default: ""
    auto_only:
        meaning: Spectra for which to only compute auto-correlations, not inter-bin correlations (space-separated)
        type: str
        default: ""
    clip_chi_kernels:
        meaning: Fraction of the integration kernel peaks below which to set the kernel to zero
        type: float
        default: 1.0e-6
    sig_over_dchi:
        meaning: Ratio of the kernel width to sampling. Sets the sampling of the kernels. Larger is more precise.
        type: float
        default: 50.0
    shear_kernel_dchi:
        meaning: Sample spacing for shear kernels
        type: float
        default: 5.0
    limber_ell_start:
        meaning: For spectra listed in do_exact, the minimum ell to switch to Limber
        type: int
        default: 300
    ell_min_logspaced:
        meaning: Minimum ell value for log-spaced values (usually higher than linear)
        type: real
        default: -1
    ell_max_logspaced:
        meaning: Maximum ell value for log-spaced values (usually higher than linear)
        type: real
        default: -1
    n_ell_logspaced:
        meaning: Number of log-spaced C_ell values produced
        type: real
        default: -1
    ell_min_linspaced:
        meaning: Minimum ell value for linearly-spaced values (usually lower than log-spaced)
        type: real
        default: -1
    ell_max_linspaced:
        meaning: Maximum ell value for linearly-spaced values (usually higher than log-spaced)
        type: real
        default: -1
    n_ell_linspaced:
        meaning: Number of linearly-spaced C_ell values produced
        type: real
        default:
    dlogchi:
        meaning: spacing in log-chi for exact non-limber calculation (or -1 to auto-set)
        type: int
        default: -1
    chi_pad_upper:
        meaning: Upper padding fraction in chi for non-limber calculation
        type: float
        default: 2.0
    chi_pad_upper:
        meaning: Lower padding fraction in chi for non-limber calculation
        type: float
        default: 2.0
    shear-shear:
        meaning: See note in the explanation above for this and related parameters
        type: str or bool
        default:
    limber_abs_tol:
        meaning: Absolute tolerance for the Limber integral
        type: real
        default: 0.0
    limber_rel_tol:
        meaning: Relative tolerance for the Limber integral
        type: real
        default: 0.001
    lin_bias_prefix:
        meaning: Parameter name to use for linear bias values, e.g. b for b1, b2, b3, etc.
        type: str
        default: b
    do_rsd:
        meaning: Whether to compute RSD in non-limber calculations
        type: bool
        default: False
    fz_from_block:
        meaning: Whether to get f(z) used in RSD from the datablock. If False, from spline derivative of P(k,z). 
        type: bool
        default: False
inputs:
    matter_power_nl:
        k_h:
            meaning: Sample values of nonlinear spectrum in Mpc/h. 
                Many inputs P(k) sections may be required depending on what C_ell spectra are requested - see above.
            type: real 1d
            default:
        z:
            meaning: Redshift of nonlinear spectrum samples
            type: real 1d
            default:
        P_k:
            meaning: Nonlinear spectrum in (Mpc/h)^{-3}
            type: real 2d
            default:
    distances:
        z:
            meaning: Redshift samples of d_m
            type: real 1d
            default:
        a:
            meaning: Scale factor samples of d_m
            type: real 1d
            default:
        d_m:
            meaning: Comoving distance to sample points.
            type: real 1d
            default:
    cosmological_parameters:
        h0:
            meaning: The Hubble parameter H0/100 km/s/Mpc
            type: real
            default:
        chi_star:
            meaning: CMB distance. Only needed if doing CMB Kappa spectra.
            type: real
            default:
    wl_number_density:
        z:
            meaning: Redshift samples of binned n(z). A different section name to wl_number_density will be used depending
                on the options chosen (see above)
            type: real 1d
            default:
        nbin:
            meaning: Number of tomographic bins used
            type: int
            default:
        bin_{i}:
            meaning: Number density n(z) samples for each bin i=1..nbin.
            type: real 1d
            default:
outputs:
    kernel_{sample}:
        n_of_chi_chi_{i}:
            meaning: The chi values for the n(chi) calculation. Only if save_kernels=T.
            type: real 1d
        n_of_chi_n_{i}:
            meaning: The n values for the n(chi) calculation. Only if save_kernels=T.
            type: real 1d
        w_of_chi_chi_{i}:
            meaning: The chi values for the w(chi) calculation. Only if save_kernels=T and shear spectrum calculated.
            type: real 1d
        w_of_chi_n_{i}:
            meaning: The n values for the w(chi) calculation. Only if save_kernels=T and shear spectrum calculated.
            type: real 1d
        ww_of_chi_chi_{i}:
            meaning: The chi values for the ww(chi) calculation. Only if save_kernels=T and Weyl spectrum calculated.
            type: real 1d
        ww_of_chi_n_{i}:
            meaning: The n values for the ww(chi) calculation. Only if save_kernels=T and Weyl spectrum calculated.
            type: real 1d
    shear_cl:
        nbin_a:
            meaning: Number of tomographic bins for first of the two quantities correlated.
                Various sections will have these outputs depending on the options chosen
            type: int
        nbin_b:
            meaning: Number of tomographic bins for second of the two quantities correlated
            type: int
        nbin:
            meaning: Only if auto-correlation is calculated. Number of tomographic
                bins for the quantity (nbin=nbin_a=nbin_b)
            type: int
        ell:
            meaning: Values at which c_ell are calculated
            type: int 1d
        bin_{i}_{j}:
            meaning: S for relevant i and j combinations. C_ell calculated at corresponding
                ell.
            type: real 1d
        chi_peak_{i}_{j}:
            meaning: Only if get_kernel_peaks=T. Peak of the n(z) or w(z) for this
                bin combination
            type: real
        arcmin_per_Mpch_{i}_{j}:
            meaning: Only if get_kernel_peaks=T. Conversion factor from mpc/h to arcmin
                for this bin
            type: real
