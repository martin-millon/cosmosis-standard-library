name: wl_spectra
version: '1.0'
purpose: Compute various weak lensing C\_ell from P(k,z) with the Limber integral
url: ''
interface: interface.so
attribution: [CosmoSIS team, Matt Becker]
rules: ''
cite: []
assumptions:
-   The Limber integral is valid on the scales in question

explanation: >
    DEPRECATED: You should use the module cosmosis-standard-library/structure/projection/project_2d.py instead.

    The Limber approximation integrates a 3D power spectrum over the radial
    direction to get a 2D angular power spectrum.  It is an approximation
    which is only valid on smaller scales.


    :math:`C_\ell =  A \int_0^{\chi_1} W_1(\chi) W_2(\chi) P(k=l/\chi, z(\chi)) / \chi^2 d\chi`


    The full integral must integrate over k(\ell) also.

    For weak lensing, the power spectrum is the matter power spectrum and the two
    kernel functions W depend on the redshift bins being used and the geometry.

    Parts of this code and the underlying implementation of limber are based on cosmocalc:
    https://bitbucket.org/beckermr/cosmocalc-public

params:
    n_ell:
        meaning: Number of log-spaced ell values to compute
        type: int
        default:
    ell_min:
        meaning: Minimum ell value to compute
        type: real
        default:
    ell_max:
        meaning: Maximum ell value to compute
        type: real
        default:
    shear_shear:
        meaning: Compute shear auto-spectra?
        type: bool
        default: true
    intrinsic_alignments:
        meaning: Compute intrinsic alignments spectra?
        type: bool
        default: false
    matter_spectra:
        meaning: Compute matter power spectra?
        type: bool
        default: false
    ggl_spectra:
        meaning: Compute galaxy-galaxy lensing spectra?
        type: bool
        default: false
    gal_IA_cross_spectra:
        meaning: Compute cross-power between galaxy positions and alignments?
        type: bool
        default: false
    mag_gal_cross_spectra:
        meaning: Compute lensing magnification cross-spectra?
        type: bool
        default: false
    mag_mag:
        meaning: Compute lensing magnification auto-spectra?
        type: bool
        default: false
inputs:
    cosmological_parameters:
        omega_m:
            meaning: Density fraction of all matter; used in the prefactor
            type: real
            default:
        h0:
            meaning: Hubble factor H0 / 100 km/s/Mpc.
            type: real
            default:
    distances:
        z:
            meaning: Redshift values of distance samples
            type: real 1d
            default:
        d_m:
            meaning: Comoving distnace to redshift values in units of Mpc (no factor
                h)
            type: real 1d
            default:
    matter_power_nl:
        z:
            meaning: Redshift values of P(k,z) samples
            type: real 1d
            default:
        k_h:
            meaning: Wavenumber k values of P(k,z) samples in units of Mpc/h
            type: real 1d
            default:
        P_k:
            meaning: Non-linear matter power spectrum at samples in (Mpc/h)^{-3}
            type: real 2d
            default:
    wl_number_density:
        nbin:
            meaning: Number of redshift bins
            type: int
            default:
        z:
            meaning: Redshift values of n(z) samples
            type: real 1d
            default:
        bin\_:
            meaning: Bin n(z) values.  Need not be normalized. bin_1,
                bin_2, bin_3, ....
            type: real 1d
            default:
    matter_power_gal:
        z:
            meaning: Redshift values of P(k,z) samples
            type: real 1d
            default:
        k_h:
            meaning: Wavenumber k values of P(k,z) samples in units of Mpc/h
            type: real 1d
            default:
        P_k:
            meaning: Non-linear galaxy power spectrum at samples in (Mpc/h)^{-3}
            type: real 2d
            default:
    matter_power_gal_mass:
        z:
            meaning: Redshift values of P(k,z) samples
            type: real 1d
            default:
        k_h:
            meaning: Wavenumber k values of P_{gm}(k,z) samples in units of Mpc/h
            type: real 1d
            default:
        P_k:
            meaning: Non-linear galaxy-mass cross-power spectrum at samples in (Mpc/h)^{-3}
            type: real 2d
            default:
outputs:
    shear_cl:
        ell:
            meaning: Sample ell values for output C_ell
            type: real 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    shear_cl_ii:
        ell:
            meaning: Sample ell values for output C_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    shear_cl_gi:
        ell:
            meaning: Sample ell values for output C_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    matter_cl:
        ell:
            meaning: Sample ell values for output C_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    ggl_cl:
        ell:
            meaning: Sample ell values for output C_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    gal_IA_cross_cl:
        ell:
            meaning: Sample ell values for output C_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    magnification_galaxy_cl:
        ell:
            meaning: Sample ell values for output C_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C\_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    magnification_magnification_cl:
        ell:
            meaning: Sample ell values for output C\_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C\_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    magnification_intrinsic_cl:
        ell:
            meaning: Sample ell values for output C\_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C\_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
    magnification_shear_cl:
        ell:
            meaning: Sample ell values for output C\_ell
            type: int 1d
        nbin:
            meaning: Number of redshift bins used
            type: int
        bin_{i}_{j}:
            meaning: C\_ell (no l(l+1) factor) for (auto-correlation) bin i and j.
                Only stores j<=i.
            type: real 1d
