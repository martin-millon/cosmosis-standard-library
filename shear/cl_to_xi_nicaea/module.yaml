name: cl_to_xi_nicaea
version: '1.0'
purpose: Compute WL correlation functions xi+, xi- from C_ell
url: ''
interface: nicaea_interface.so
attribution: [Martin Kilbinger, Nicaea Team]
rules: ''
cite: [http://arxiv.org/abs/0810.5129]
assumptions:
-   Input C_ell sufficiently well-sampled over standard pre-defined range

explanation: |
    "
    The correlation functions are related to the spectra via Bessel functions:
    :math:`\xi_{(+/-)}(\theta) = \int_0^\infty C_\ell J_{(0/4)}(\ell \theta) \ell d\ell / 2\pi`

    In this module that integral is done via a Hankel Transform.

    This module is a part of the Nicaea code, with the interface written by Niall
    Maccrann.  It avoids the ringing problems of the alternative cl_to_xi code but
    generates results only on a fixed range in theta .

    The output theta values will always be from about 2.0e-07 to 1.0e+04 radians, but
    only in part of that regime, from about 1 to a few hundred arcmin, will the results
    be numerically valid.  The input ell must include the corresponding range, and
    will be extrapolated linearlly before that and cubically after it.

    "
params:
    corr_type:
        meaning: Either 0 (to do shear EE C_ell -> xi+(theta) and xi-(theta)), or
            1 (to convert galaxy position C_ell to w(theta)) or 2 (to convert the
            cross galaxy position-shear C_ell to gamma_t(theta))
        type: int
        default:
    input_section_name:
        meaning: "Name of the angular power spectrum input section. See shear/spectra\
            \ module. (Default: 'shear_cl', 'galaxy_cl', or 'galaxy_shear_cl' depending\
            \ on corr_type)"
        type: str
        default:
    output_section_name:
        meaning: "Name of the angular correlation function output section (Default:\
            \ 'shear_xi', 'galaxy_shear_xi', or 'galaxy_xi' depending on corr_type)"
        type: str
        default:
inputs:
    input_section_name:
        ell:
            meaning: Sample ell values for input C_ell
            type: real 1d
            default:
        nbin_a:
            meaning: The number of redshift bins in the first quantity
            type: int
            default:
        nbin_b:
            meaning: The number of redshift bins in the second quantity
            type: int
            default:
        nbin:
            meaning: Number of redshift bins used if nbin_a or b not found.
            type: int
            default:
        bin_i_j:
            meaning: S C_ell (no l(l+1) factor) for bin i and j. Only need j<=i for
                modes 0 and 1.
            type: real 1d
            default:
outputs:
    output_section_name:
        theta:
            meaning: Sample theta values for output xi(theta)
            type: real 1d
        xiplus_i_j:
            meaning: xi_plus(theta) bin i and j, only if mode=0 Only stores j<=i.
            type: real 1d
        ximinus_i_j:
            meaning: xi_minus(theta) bin i and j, only if mode=0. Only stores j<=i.
            type: real 1d
        bin_i_j:
            meaning: w(theta) or gamma_t(theta) for bin i and j, only if mode=1 or
                2 respectively. Only stores j<=i.
            type: real 1d
        nbin_a:
            meaning: Number of i tomographic bins
            type: int
        nbin_b:
            meaning: Number of j tomographic bins
            type: int
